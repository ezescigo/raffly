{
  "address": "0x802C8cB6555C57dDB0E95A1be1aD57A44EB1557a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__IncorrectPrizePercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotCreated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPlayersNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "raffleName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "players",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "raffleAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "PlayerEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PlayersRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "raffleName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxWinners",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "raffleAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "RaffleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_vrfAdd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressIndexes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upKeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "raffleName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "maxWinners",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "winnerPrizePercentage",
          "type": "uint256"
        }
      ],
      "name": "createRaffle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum RaffleClonable.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_raffleOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onAbortWithdrawEntryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_raffleManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_raffleName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_raffleOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_winnerPrizePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setEmergencyMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0ff7352c01c299d0eb63d260d07a526899b0262e7c4e225e50361e2b17b327c",
  "receipt": {
    "to": null,
    "from": "0x56687a64FEA65fda2b7ec4C3b1b9Eb27B7129eB8",
    "contractAddress": "0x802C8cB6555C57dDB0E95A1be1aD57A44EB1557a",
    "transactionIndex": 26,
    "gasUsed": "3031955",
    "logsBloom": "0x
    "blockHash": "0x675168f185d0bdb643c89b01e485578433e4fd574fa6701957a9ca7f90aa00f7",
    "transactionHash": "0xb0ff7352c01c299d0eb63d260d07a526899b0262e7c4e225e50361e2b17b327c",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 4411902,
        "transactionHash": "0xb0ff7352c01c299d0eb63d260d07a526899b0262e7c4e225e50361e2b17b327c",
        "address": "0x802C8cB6555C57dDB0E95A1be1aD57A44EB1557a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000056687a64fea65fda2b7ec4c3b1b9eb27b7129eb8"
        ],
        "data": "0x",
        "logIndex": 83,
        "blockHash": "0x675168f185d0bdb643c89b01e485578433e4fd574fa6701957a9ca7f90aa00f7"
      },
      {
        "transactionIndex": 26,
        "blockNumber": 4411902,
        "transactionHash": "0xb0ff7352c01c299d0eb63d260d07a526899b0262e7c4e225e50361e2b17b327c",
        "address": "0x802C8cB6555C57dDB0E95A1be1aD57A44EB1557a",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 84,
        "blockHash": "0x675168f185d0bdb643c89b01e485578433e4fd574fa6701957a9ca7f90aa00f7"
      }
    ],
    "blockNumber": 4411902,
    "cumulativeGasUsed": "8719644",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "3306",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c"
  ],
  "numDeployments": 1,
  "solcInputHash": "6689b44fe8c8d2a83a85bb1ad6cea596",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__IncorrectPrizePercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPlayersNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"raffleName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"raffleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"PlayerEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PlayersRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"raffleName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxWinners\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"raffleAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"RaffleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_vrfAdd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressIndexes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upKeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"raffleName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"maxWinners\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerPrizePercentage\",\"type\":\"uint256\"}],\"name\":\"createRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum RaffleClonable.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_raffleOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onAbortWithdrawEntryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_raffleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_raffleName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_raffleOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_winnerPrizePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ezequiel Scigolini\",\"details\":\"Implements Chainlink VRF v2 and Keepers\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for the 'upkeepNeeded' to return true The following should be true in order to return true: 1. Time interval should have passed 2. Raffle should at least have 1 player 3. Keeper's Subscription is funded with LINK 4. Lottery should be in 'Open' state\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Raffle Clonable Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Creating decentralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RaffleClonable.sol\":\"RaffleClonable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/RaffleClonable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n// import \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__NotCreated();\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\nerror Raffle__IncorrectPrizePercentage();\\n\\n/**\\n * @title Raffle Clonable Contract\\n * @author Ezequiel Scigolini\\n * @notice Creating decentralized smart contract\\n * @dev Implements Chainlink VRF v2 and Keepers\\n */\\ncontract RaffleClonable is\\n    Initializable,\\n    Ownable,\\n    VRFConsumerBaseV2,\\n    KeeperCompatibleInterface,\\n    ReentrancyGuard\\n{\\n    // Types\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING,\\n        CLOSED\\n    } // uint256 0 = OPEN, 1 = CALCULATING, 2 = CLOSED\\n\\n    // State Variables\\n    address payable[] private s_players;\\n    address payable[] private s_recentWinners;\\n    address[] public addressIndexes;\\n    VRFCoordinatorV2Interface private i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private constant callbackGasLimit = 2000000;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Raffle variables\\n    address public immutable _vrfAdd;\\n    address public s_raffleManager;\\n    address public s_raffleOwner;\\n    address private s_recentWinner;\\n    // address private s_recentWinner2;\\n    // address private s_recentWinner3;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 public s_entranceFee;\\n    uint256 public s_interval;\\n    uint256 public s_winnerPrizePercentage; // between 0 and 100;\\n    // uint32 public s_maxWinners;\\n    string public s_raffleName;\\n    bool isInitialized;\\n    bool s_raffleCreated;\\n    bool private upkeepPerformed; // required??\\n    bool onAbortRaffle;\\n\\n    // Events\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n    event RaffleCreated(\\n        string raffleName,\\n        uint256 entranceFee,\\n        uint32 maxWinners,\\n        uint256 interval,\\n        address ownerAddress,\\n        address raffleAddress,\\n        uint256 balance\\n    );\\n    event PlayerEntered(\\n        address indexed player,\\n        uint256 balance,\\n        uint256 currentPlayersNumber,\\n        string raffleName,\\n        address[] players,\\n        uint256 entranceFee,\\n        address raffleAddress,\\n        address ownerAddress\\n    );\\n    event PlayersRefunded();\\n\\n    struct Player {\\n        uint256 entryCount;\\n        uint256 index;\\n    }\\n\\n    // Mappings\\n    mapping(address => Player) players;\\n    mapping(address => uint256) balances;\\n\\n    // Functions\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane\\n    ) initializer VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        _vrfAdd = vrfCoordinatorV2;\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        s_raffleManager = address(msg.sender);\\n        isInitialized = true;\\n    }\\n\\n    // Called in every new instance (after raffleFactory.createNewRaffle() is called)\\n    function initialize(address _raffleOwner) public payable initializer {\\n        require(isInitialized == false, \\\"contract constructor already called\\\");\\n        transferOwnership(_raffleOwner);\\n        s_raffleState = RaffleState.CLOSED;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(_vrfAdd);\\n        s_raffleOwner = _raffleOwner;\\n        s_raffleCreated = false;\\n        upkeepPerformed = false;\\n        onAbortRaffle = false;\\n    }\\n\\n    // After creating the instance, the owner must call createRaffle() and provide config parameters\\n    function createRaffle(\\n        string memory raffleName,\\n        uint256 entranceFee,\\n        uint32 maxWinners,\\n        uint256 interval,\\n        uint256 winnerPrizePercentage\\n    ) public onlyOwner {\\n        require(msg.sender == s_raffleOwner, \\\"Only owner can create Raffle\\\");\\n        require(s_raffleCreated == false, \\\"Raffle is already created\\\");\\n        if (winnerPrizePercentage > 100) {\\n            revert Raffle__IncorrectPrizePercentage();\\n        }\\n        s_raffleName = raffleName;\\n        s_entranceFee = entranceFee;\\n        s_winnerPrizePercentage = winnerPrizePercentage;\\n        // s_maxWinners = maxWinners;\\n        s_interval = interval; //* 86400;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        s_raffleCreated = true;\\n\\n        emit RaffleCreated(\\n            raffleName,\\n            entranceFee,\\n            maxWinners,\\n            interval,\\n            msg.sender,\\n            address(this),\\n            address(this).balance\\n        );\\n    }\\n\\n    function enterRaffle() external payable {\\n        if (msg.value < s_entranceFee) {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n        if (!s_raffleCreated) {\\n            revert Raffle__NotCreated();\\n        }\\n\\n        if (players[msg.sender].entryCount == 0) {\\n            addressIndexes.push(msg.sender);\\n            s_players.push(payable(msg.sender));\\n            players[msg.sender].entryCount = 1;\\n            players[msg.sender].index = addressIndexes.length;\\n        } else {\\n            players[msg.sender].entryCount += 1;\\n        }\\n\\n        emit PlayerEntered(\\n            msg.sender,\\n            address(this).balance,\\n            s_players.length,\\n            s_raffleName,\\n            addressIndexes,\\n            s_entranceFee,\\n            // s_maxWinners,\\n            address(this),\\n            s_raffleOwner\\n        );\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for the 'upkeepNeeded' to return true\\n     * The following should be true in order to return true:\\n     * 1. Time interval should have passed\\n     * 2. Raffle should at least have 1 player\\n     * 3. Keeper's Subscription is funded with LINK\\n     * 4. Lottery should be in 'Open' state\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public override returns (bool upKeepNeeded, bytes memory /* performData */) {\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > s_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        upKeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n        return (upKeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    function performUpkeep(bytes calldata /* _performData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        s_raffleState = RaffleState.CALCULATING;\\n\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            callbackGasLimit,\\n            NUM_WORDS // s_maxWinners\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256,\\n        /* requestId */ uint256[] memory randomWords\\n    ) internal override nonReentrant {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_recentWinners.push(payable(recentWinner));\\n        s_raffleState = RaffleState.CLOSED;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n\\n        // Winner receives % setted by Owner\\n        (bool successWinner, ) = recentWinner.call{\\n            value: (address(this).balance * s_winnerPrizePercentage) / 100\\n        }(\\\"\\\");\\n        if (!successWinner) {\\n            revert Raffle__TransferFailed();\\n        }\\n\\n        // Owner receives the remaining balance\\n        (bool successOwner, ) = s_raffleOwner.call{value: address(this).balance}(\\\"\\\");\\n        if (!successOwner) {\\n            revert Raffle__TransferFailed();\\n        }\\n\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function setEmergencyMode() public adminRestricted {\\n        onAbortRaffle = true;\\n    }\\n\\n    function onAbortWithdrawEntryFee() public {\\n        require(balances[msg.sender] >= s_entranceFee);\\n        require(onAbortRaffle == true);\\n        balances[msg.sender] -= s_entranceFee;\\n        (bool sent, ) = msg.sender.call{value: s_entranceFee}(\\\"\\\");\\n        require(sent, \\\"failed to send ether\\\");\\n    }\\n\\n    // View / Pure functions\\n    function getEntranceFee() public view returns (uint256) {\\n        return s_entranceFee;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return s_interval;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getPlayers() public view returns (address payable[] memory) {\\n        return s_players;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    // Modifiers\\n\\n    modifier adminRestricted() {\\n        require(msg.sender == s_raffleManager);\\n        _;\\n    }\\n\\n    // modifier restricted() {\\n    //     require(msg.sender == s_raffleOwner);\\n    //     _;\\n    // }\\n}\\n\",\"keccak256\":\"0x9ff246e174f6662257d88729faf767f3cb7ad324f112cb421c5b2caf8789a818\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162003a3138038062003a31833981810160405281019062000038919062000477565b82620000596200004d6200029d60201b60201c565b620002a560201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506001808190555060008060019054906101000a900460ff16159050808015620000c75750600160008054906101000a900460ff1660ff16105b80620001035750620000e4306200036a60201b6200188c1760201c565b158015620001025750600160008054906101000a900460ff1660ff16145b5b62000145576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200013c906200055a565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801562000183576001600060016101000a81548160ff0219169083151502179055505b8373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508267ffffffffffffffff1660c08167ffffffffffffffff16815250508160a0818152505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600e60006101000a81548160ff0219169083151502179055508015620002935760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516200028a9190620005d6565b60405180910390a15b50505050620005f3565b600033905090565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003bf8262000392565b9050919050565b620003d181620003b2565b8114620003dd57600080fd5b50565b600081519050620003f181620003c6565b92915050565b600067ffffffffffffffff82169050919050565b6200041681620003f7565b81146200042257600080fd5b50565b60008151905062000436816200040b565b92915050565b6000819050919050565b62000451816200043c565b81146200045d57600080fd5b50565b600081519050620004718162000446565b92915050565b6000806000606084860312156200049357620004926200038d565b5b6000620004a386828701620003e0565b9350506020620004b68682870162000425565b9250506040620004c98682870162000460565b9150509250925092565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600062000542602e83620004d3565b91506200054f82620004e4565b604082019050919050565b60006020820190508181036000830152620005758162000533565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000620005be620005b8620005b2846200057c565b62000593565b62000586565b9050919050565b620005d0816200059d565b82525050565b6000602082019050620005ed6000830184620005c5565b92915050565b60805160a05160c05160e0516133f66200063b6000396000818161145a01526115ec01526000610dd101526000610db001526000818161070b015261075f01526133f66000f3fe6080604052600436106101c25760003560e01c806369f77bba116100f7578063b61e30ed11610095578063cc9b2ea311610064578063cc9b2ea3146105ad578063e55ae4e8146105d8578063f2fde38b14610615578063fd6673f51461063e576101c2565b8063b61e30ed14610510578063bda50a391461053b578063c1c244e814610566578063c4d66de814610591576101c2565b80638b5b9ccc116100d15780638b5b9ccc146104645780638da5cb5b1461048f57806391ad27b4146104ba578063a2eaacac146104e5576101c2565b806369f77bba146103e45780636e04ff0d1461040f578063715018a61461044d576101c2565b80634585e33b116101645780635919ee3c1161013e5780635919ee3c1461033a5780635f1b0fd81461036557806361fbe973146103905780636206fe8b146103bb576101c2565b80634585e33b146102a9578063473f1ddc146102d25780635832d571146102fd576101c2565b806312065fe0116101a057806312065fe0146102345780631fe543e31461025f5780632cfcc5391461028857806334ba84fa14610292576101c2565b8063085d0b83146101c757806309bc33a7146101de578063115cbaf514610209575b600080fd5b3480156101d357600080fd5b506101dc610669565b005b3480156101ea57600080fd5b506101f36106e0565b6040516102009190611e05565b60405180910390f35b34801561021557600080fd5b5061021e6106ea565b60405161022b9190611e97565b60405180910390f35b34801561024057600080fd5b50610249610701565b6040516102569190611e05565b60405180910390f35b34801561026b57600080fd5b506102866004803603810190610281919061204b565b610709565b005b6102906107c9565b005b34801561029e57600080fd5b506102a7610b43565b005b3480156102b557600080fd5b506102d060048036038101906102cb9190612102565b610cba565b005b3480156102de57600080fd5b506102e7610e90565b6040516102f49190612190565b60405180910390f35b34801561030957600080fd5b50610324600480360381019061031f91906121ab565b610eba565b6040516103319190612190565b60405180910390f35b34801561034657600080fd5b5061034f610ef9565b60405161035c9190611e05565b60405180910390f35b34801561037157600080fd5b5061037a610eff565b6040516103879190611e05565b60405180910390f35b34801561039c57600080fd5b506103a5610f0c565b6040516103b29190612257565b60405180910390f35b3480156103c757600080fd5b506103e260048036038101906103dd919061236a565b610f9a565b005b3480156103f057600080fd5b506103f96111f3565b6040516104069190612190565b60405180910390f35b34801561041b57600080fd5b50610436600480360381019061043191906124a2565b611219565b60405161044492919061255b565b60405180910390f35b34801561045957600080fd5b506104626112e3565b005b34801561047057600080fd5b5061047961136b565b604051610486919061265b565b60405180910390f35b34801561049b57600080fd5b506104a46113f9565b6040516104b19190612190565b60405180910390f35b3480156104c657600080fd5b506104cf611422565b6040516104dc9190611e05565b60405180910390f35b3480156104f157600080fd5b506104fa61142c565b6040516105079190611e05565b60405180910390f35b34801561051c57600080fd5b50610525611432565b6040516105329190612190565b60405180910390f35b34801561054757600080fd5b50610550611458565b60405161055d9190612190565b60405180910390f35b34801561057257600080fd5b5061057b61147c565b6040516105889190611e05565b60405180910390f35b6105ab60048036038101906105a691906126a9565b611486565b005b3480156105b957600080fd5b506105c261173a565b6040516105cf9190611e05565b60405180910390f35b3480156105e457600080fd5b506105ff60048036038101906105fa91906121ab565b611740565b60405161060c9190612190565b60405180910390f35b34801561062157600080fd5b5061063c600480360381019061063791906126a9565b611788565b005b34801561064a57600080fd5b5061065361187f565b6040516106609190611e05565b60405180910390f35b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c357600080fd5b6001600e60036101000a81548160ff021916908315150217905550565b6000600a54905090565b6000600860149054906101000a900460ff16905090565b600047905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107bb57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016107b29291906126d6565b60405180910390fd5b6107c582826118af565b5050565b600a54341015610805576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600281111561081957610818611e20565b5b600860149054906101000a900460ff16600281111561083b5761083a611e20565b5b14610872576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e60019054906101000a900460ff166108b8576040517fcea258aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015403610a61576004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600480549050600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550610abc565b6001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610ab4919061272e565b925050819055505b3373ffffffffffffffffffffffffffffffffffffffff167f46a5d7d129ecc672f5b57b3cf00f6396abe48f624a2bb2141a9da4962fec58f647600280549050600d6004600a5430600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610b39979695949392919061297f565b60405180910390a2565b600a54601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b9157600080fd5b60011515600e60039054906101000a900460ff16151514610bb157600080fd5b600a54601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c0291906129fc565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff16600a54604051610c3190612a61565b60006040518083038185875af1925050503d8060008114610c6e576040519150601f19603f3d011682016040523d82523d6000602084013e610c73565b606091505b5050905080610cb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cae90612ac2565b60405180910390fd5b50565b6000610cd460405180602001604052806000815250611219565b50905080610d435747600280549050600860149054906101000a900460ff166002811115610d0557610d04611e20565b5b6040517f584327aa000000000000000000000000000000000000000000000000000000008152600401610d3a93929190612ae2565b60405180910390fd5b6001600860146101000a81548160ff02191690836002811115610d6957610d68611e20565b5b02179055506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006003621e848060016040518663ffffffff1660e01b8152600401610e18959493929190612b81565b6020604051808303816000875af1158015610e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5b9190612be9565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60048181548110610eca57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c5481565b6000600361ffff16905090565b600d8054610f1990612791565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4590612791565b8015610f925780601f10610f6757610100808354040283529160200191610f92565b820191906000526020600020905b815481529060010190602001808311610f7557829003601f168201915b505050505081565b610fa2611c78565b73ffffffffffffffffffffffffffffffffffffffff16610fc06113f9565b73ffffffffffffffffffffffffffffffffffffffff1614611016576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100d90612c62565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109d90612cce565b60405180910390fd5b60001515600e60019054906101000a900460ff161515146110fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f390612d3a565b60405180910390fd5b6064811115611137576040517fb41d392500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84600d90816111469190612ef1565b5083600a8190555080600c8190555081600b819055506000600860146101000a81548160ff0219169083600281111561118257611181611e20565b5b0217905550426009819055506001600e60016101000a81548160ff0219169083151502179055507f7f864423eef054d399dc83c1e08ac2d1e53f9192c5f794cab92bf97de31f54bc858585853330476040516111e49796959493929190612fc3565b60405180910390a15050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060606000600860149054906101000a900460ff16600281111561124157611240611e20565b5b6000600281111561125557611254611e20565b5b1490506000600b546009544261126b91906129fc565b1190506000806002805490501190506000804711905083801561128b5750825b80156112945750815b801561129d5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6112eb611c78565b73ffffffffffffffffffffffffffffffffffffffff166113096113f9565b73ffffffffffffffffffffffffffffffffffffffff161461135f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135690612c62565b60405180910390fd5b6113696000611c80565b565b606060028054806020026020016040519081016040528092919081815260200182805480156113ef57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116113a5575b5050505050905090565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600b54905090565b600a5481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600954905090565b60008060019054906101000a900460ff161590508080156114b75750600160008054906101000a900460ff1660ff16105b806114e457506114c63061188c565b1580156114e35750600160008054906101000a900460ff1660ff16145b5b611523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151a906130ab565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611560576001600060016101000a81548160ff0219169083151502179055505b60001515600e60009054906101000a900460ff161515146115b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ad9061313d565b60405180910390fd5b6115bf82611788565b6002600860146101000a81548160ff021916908360028111156115e5576115e4611e20565b5b02179055507f0000000000000000000000000000000000000000000000000000000000000000600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600e60016101000a81548160ff0219169083151502179055506000600e60026101000a81548160ff0219169083151502179055506000600e60036101000a81548160ff02191690831515021790555080156117365760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161172d91906131a5565b60405180910390a15b5050565b600b5481565b600060028281548110611756576117556131c0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611790611c78565b73ffffffffffffffffffffffffffffffffffffffff166117ae6113f9565b73ffffffffffffffffffffffffffffffffffffffff1614611804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fb90612c62565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186a90613261565b60405180910390fd5b61187c81611c80565b50565b6000600280549050905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6002600154036118f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118eb906132cd565b60405180910390fd5b6002600181905550600060028054905082600081518110611918576119176131c0565b5b602002602001015161192a919061331c565b9050600060028281548110611942576119416131c0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600860146101000a81548160ff02191690836002811115611a3957611a38611e20565b5b0217905550600067ffffffffffffffff811115611a5957611a58611f08565b5b604051908082528060200260200182016040528015611a875781602001602082028036833780820191505090505b5060029080519060200190611a9d929190611d45565b504260098190555060008173ffffffffffffffffffffffffffffffffffffffff166064600c5447611ace919061334d565b611ad8919061338f565b604051611ae490612a61565b60006040518083038185875af1925050503d8060008114611b21576040519150601f19603f3d011682016040523d82523d6000602084013e611b26565b606091505b5050905080611b61576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051611ba990612a61565b60006040518083038185875af1925050503d8060008114611be6576040519150601f19603f3d011682016040523d82523d6000602084013e611beb565b606091505b5050905080611c26576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a250505050600180819055505050565b600033905090565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054828255906000526020600020908101928215611dbe579160200282015b82811115611dbd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611d65565b5b509050611dcb9190611dcf565b5090565b5b80821115611de8576000816000905550600101611dd0565b5090565b6000819050919050565b611dff81611dec565b82525050565b6000602082019050611e1a6000830184611df6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611e6057611e5f611e20565b5b50565b6000819050611e7182611e4f565b919050565b6000611e8182611e63565b9050919050565b611e9181611e76565b82525050565b6000602082019050611eac6000830184611e88565b92915050565b6000604051905090565b600080fd5b600080fd5b611ecf81611dec565b8114611eda57600080fd5b50565b600081359050611eec81611ec6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f4082611ef7565b810181811067ffffffffffffffff82111715611f5f57611f5e611f08565b5b80604052505050565b6000611f72611eb2565b9050611f7e8282611f37565b919050565b600067ffffffffffffffff821115611f9e57611f9d611f08565b5b602082029050602081019050919050565b600080fd5b6000611fc7611fc284611f83565b611f68565b90508083825260208201905060208402830185811115611fea57611fe9611faf565b5b835b818110156120135780611fff8882611edd565b845260208401935050602081019050611fec565b5050509392505050565b600082601f83011261203257612031611ef2565b5b8135612042848260208601611fb4565b91505092915050565b6000806040838503121561206257612061611ebc565b5b600061207085828601611edd565b925050602083013567ffffffffffffffff81111561209157612090611ec1565b5b61209d8582860161201d565b9150509250929050565b600080fd5b60008083601f8401126120c2576120c1611ef2565b5b8235905067ffffffffffffffff8111156120df576120de6120a7565b5b6020830191508360018202830111156120fb576120fa611faf565b5b9250929050565b6000806020838503121561211957612118611ebc565b5b600083013567ffffffffffffffff81111561213757612136611ec1565b5b612143858286016120ac565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061217a8261214f565b9050919050565b61218a8161216f565b82525050565b60006020820190506121a56000830184612181565b92915050565b6000602082840312156121c1576121c0611ebc565b5b60006121cf84828501611edd565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122125780820151818401526020810190506121f7565b60008484015250505050565b6000612229826121d8565b61223381856121e3565b93506122438185602086016121f4565b61224c81611ef7565b840191505092915050565b60006020820190508181036000830152612271818461221e565b905092915050565b600080fd5b600067ffffffffffffffff82111561229957612298611f08565b5b6122a282611ef7565b9050602081019050919050565b82818337600083830152505050565b60006122d16122cc8461227e565b611f68565b9050828152602081018484840111156122ed576122ec612279565b5b6122f88482856122af565b509392505050565b600082601f83011261231557612314611ef2565b5b81356123258482602086016122be565b91505092915050565b600063ffffffff82169050919050565b6123478161232e565b811461235257600080fd5b50565b6000813590506123648161233e565b92915050565b600080600080600060a0868803121561238657612385611ebc565b5b600086013567ffffffffffffffff8111156123a4576123a3611ec1565b5b6123b088828901612300565b95505060206123c188828901611edd565b94505060406123d288828901612355565b93505060606123e388828901611edd565b92505060806123f488828901611edd565b9150509295509295909350565b600067ffffffffffffffff82111561241c5761241b611f08565b5b61242582611ef7565b9050602081019050919050565b600061244561244084612401565b611f68565b90508281526020810184848401111561246157612460612279565b5b61246c8482856122af565b509392505050565b600082601f83011261248957612488611ef2565b5b8135612499848260208601612432565b91505092915050565b6000602082840312156124b8576124b7611ebc565b5b600082013567ffffffffffffffff8111156124d6576124d5611ec1565b5b6124e284828501612474565b91505092915050565b60008115159050919050565b612500816124eb565b82525050565b600081519050919050565b600082825260208201905092915050565b600061252d82612506565b6125378185612511565b93506125478185602086016121f4565b61255081611ef7565b840191505092915050565b600060408201905061257060008301856124f7565b81810360208301526125828184612522565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006125c28261214f565b9050919050565b6125d2816125b7565b82525050565b60006125e483836125c9565b60208301905092915050565b6000602082019050919050565b60006126088261258b565b6126128185612596565b935061261d836125a7565b8060005b8381101561264e57815161263588826125d8565b9750612640836125f0565b925050600181019050612621565b5085935050505092915050565b6000602082019050818103600083015261267581846125fd565b905092915050565b6126868161216f565b811461269157600080fd5b50565b6000813590506126a38161267d565b92915050565b6000602082840312156126bf576126be611ebc565b5b60006126cd84828501612694565b91505092915050565b60006040820190506126eb6000830185612181565b6126f86020830184612181565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061273982611dec565b915061274483611dec565b925082820190508082111561275c5761275b6126ff565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127a957607f821691505b6020821081036127bc576127bb612762565b5b50919050565b60008190508160005260206000209050919050565b600081546127e481612791565b6127ee81866121e3565b94506001821660008114612809576001811461281f57612852565b60ff198316865281151560200286019350612852565b612828856127c2565b60005b8381101561284a5781548189015260018201915060208101905061282b565b808801955050505b50505092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b6128958161216f565b82525050565b60006128a7838361288c565b60208301905092915050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128f36128ee836128b3565b6128c0565b9050919050565b600061290682546128e0565b9050919050565b6000600182019050919050565b60006129258261285b565b61292f8185612866565b935061293a83612877565b8060005b838110156129725761294f826128fa565b612959888261289b565b97506129648361290d565b92505060018101905061293e565b5085935050505092915050565b600060e082019050612994600083018a611df6565b6129a16020830189611df6565b81810360408301526129b381886127d7565b905081810360608301526129c7818761291a565b90506129d66080830186611df6565b6129e360a0830185612181565b6129f060c0830184612181565b98975050505050505050565b6000612a0782611dec565b9150612a1283611dec565b9250828203905081811115612a2a57612a296126ff565b5b92915050565b600081905092915050565b50565b6000612a4b600083612a30565b9150612a5682612a3b565b600082019050919050565b6000612a6c82612a3e565b9150819050919050565b7f6661696c656420746f2073656e64206574686572000000000000000000000000600082015250565b6000612aac6014836121e3565b9150612ab782612a76565b602082019050919050565b60006020820190508181036000830152612adb81612a9f565b9050919050565b6000606082019050612af76000830186611df6565b612b046020830185611df6565b612b116040830184611df6565b949350505050565b6000819050919050565b612b2c81612b19565b82525050565b600067ffffffffffffffff82169050919050565b612b4f81612b32565b82525050565b600061ffff82169050919050565b612b6c81612b55565b82525050565b612b7b8161232e565b82525050565b600060a082019050612b966000830188612b23565b612ba36020830187612b46565b612bb06040830186612b63565b612bbd6060830185612b72565b612bca6080830184612b72565b9695505050505050565b600081519050612be381611ec6565b92915050565b600060208284031215612bff57612bfe611ebc565b5b6000612c0d84828501612bd4565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612c4c6020836121e3565b9150612c5782612c16565b602082019050919050565b60006020820190508181036000830152612c7b81612c3f565b9050919050565b7f4f6e6c79206f776e65722063616e2063726561746520526166666c6500000000600082015250565b6000612cb8601c836121e3565b9150612cc382612c82565b602082019050919050565b60006020820190508181036000830152612ce781612cab565b9050919050565b7f526166666c6520697320616c7265616479206372656174656400000000000000600082015250565b6000612d246019836121e3565b9150612d2f82612cee565b602082019050919050565b60006020820190508181036000830152612d5381612d17565b9050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612da77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d6a565b612db18683612d6a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612dee612de9612de484611dec565b612dc9565b611dec565b9050919050565b6000819050919050565b612e0883612dd3565b612e1c612e1482612df5565b848454612d77565b825550505050565b600090565b612e31612e24565b612e3c818484612dff565b505050565b5b81811015612e6057612e55600082612e29565b600181019050612e42565b5050565b601f821115612ea557612e76816127c2565b612e7f84612d5a565b81016020851015612e8e578190505b612ea2612e9a85612d5a565b830182612e41565b50505b505050565b600082821c905092915050565b6000612ec860001984600802612eaa565b1980831691505092915050565b6000612ee18383612eb7565b9150826002028217905092915050565b612efa826121d8565b67ffffffffffffffff811115612f1357612f12611f08565b5b612f1d8254612791565b612f28828285612e64565b600060209050601f831160018114612f5b5760008415612f49578287015190505b612f538582612ed5565b865550612fbb565b601f198416612f69866127c2565b60005b82811015612f9157848901518255600182019150602085019450602081019050612f6c565b86831015612fae5784890151612faa601f891682612eb7565b8355505b6001600288020188555050505b505050505050565b600060e0820190508181036000830152612fdd818a61221e565b9050612fec6020830189611df6565b612ff96040830188612b72565b6130066060830187611df6565b6130136080830186612181565b61302060a0830185612181565b61302d60c0830184611df6565b98975050505050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613095602e836121e3565b91506130a082613039565b604082019050919050565b600060208201905081810360008301526130c481613088565b9050919050565b7f636f6e747261637420636f6e7374727563746f7220616c72656164792063616c60008201527f6c65640000000000000000000000000000000000000000000000000000000000602082015250565b60006131276023836121e3565b9150613132826130cb565b604082019050919050565b600060208201905081810360008301526131568161311a565b9050919050565b6000819050919050565b600060ff82169050919050565b600061318f61318a6131858461315d565b612dc9565b613167565b9050919050565b61319f81613174565b82525050565b60006020820190506131ba6000830184613196565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061324b6026836121e3565b9150613256826131ef565b604082019050919050565b6000602082019050818103600083015261327a8161323e565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006132b7601f836121e3565b91506132c282613281565b602082019050919050565b600060208201905081810360008301526132e6816132aa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061332782611dec565b915061333283611dec565b925082613342576133416132ed565b5b828206905092915050565b600061335882611dec565b915061336383611dec565b925082820261337181611dec565b91508282048414831517613388576133876126ff565b5b5092915050565b600061339a82611dec565b91506133a583611dec565b9250826133b5576133b46132ed565b5b82820490509291505056fea2646970667358221220ea11c174071861189d7e57ec47114e43ba2fb9b49bcc797c7ff78797d3ba8adb64736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Ezequiel Scigolini",
    "details": "Implements Chainlink VRF v2 and Keepers",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for the 'upkeepNeeded' to return true The following should be true in order to return true: 1. Time interval should have passed 2. Raffle should at least have 1 player 3. Keeper's Subscription is funded with LINK 4. Lottery should be in 'Open' state"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Raffle Clonable Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Creating decentralized smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 183,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 186,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 683,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 870,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 965,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "s_players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 968,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "s_recentWinners",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 971,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "addressIndexes",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 974,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "i_vrfCoordinator",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(VRFCoordinatorV2Interface)176"
      },
      {
        "astId": 991,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "s_raffleManager",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 993,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "s_raffleOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 995,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 998,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "8",
        "type": "t_enum(RaffleState)962"
      },
      {
        "astId": 1000,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1002,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "s_entranceFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1004,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "s_interval",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1006,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "s_winnerPrizePercentage",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1008,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "s_raffleName",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 1010,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "isInitialized",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1012,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "s_raffleCreated",
        "offset": 1,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1014,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "upkeepPerformed",
        "offset": 2,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1016,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "onAbortRaffle",
        "offset": 3,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1071,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "players",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(Player)1066_storage)"
      },
      {
        "astId": 1075,
        "contract": "contracts/RaffleClonable.sol:RaffleClonable",
        "label": "balances",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(VRFCoordinatorV2Interface)176": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(RaffleState)962": {
        "encoding": "inplace",
        "label": "enum RaffleClonable.RaffleState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Player)1066_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RaffleClonable.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)1066_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Player)1066_storage": {
        "encoding": "inplace",
        "label": "struct RaffleClonable.Player",
        "members": [
          {
            "astId": 1063,
            "contract": "contracts/RaffleClonable.sol:RaffleClonable",
            "label": "entryCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1065,
            "contract": "contracts/RaffleClonable.sol:RaffleClonable",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}